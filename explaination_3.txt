Description:
This problem was solved by using the Node data structure as Tree. By assigning left and right children
to the node we are able to create a tree that can be easily be encoded. The encoding is returned
as a dictionary containing each character and its unique code. That dictionary (tree) can then be
decoded to allow the original encoded characters to be returned.


Time complexity: 
This algorithm utilizes sorted() O(1) over sort() O(nlogn), but our encoding operation is dependent upon
input size giving us a O(n).

 
Space complexity:
Because we are using the sorted()we are creating a new sorted list from an iterable instead
of sorting in place using sort(). This increases our space complexity but the space complexity is
dependent upon input size giving us a O(n).
